{"version":3,"file":"component---src-pages-using-ssr-js-17ea09e75916545f5350.js","mappings":"uKAmDA,IAlCA,YAAqD,IAAD,IAArCA,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,SACzBC,GAASC,EAAAA,EAAAA,IAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAY,UAAGJ,EAAKG,oBAAR,aAAGE,EAAmBP,MAExC,OACEQ,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAAAA,QAAAA,KAAQF,EAAkBN,EAAN,MAAiBM,EAAiBN,IACtDQ,EAAAA,EAAAA,IAAAA,OAAAA,CAAMC,KAAK,cAAcC,QAASN,KAClCI,EAAAA,EAAAA,IAAAA,OAAAA,CAAMG,SAAS,WAAWD,QAASV,KACnCQ,EAAAA,EAAAA,IAAAA,OAAAA,CAAMG,SAAS,iBAAiBD,QAASN,KACzCI,EAAAA,EAAAA,IAAAA,OAAAA,CAAMG,SAAS,UAAUD,QAAQ,aACjCF,EAAAA,EAAAA,IAAAA,OAAAA,CAAMC,KAAK,eAAeC,QAAQ,aAClCF,EAAAA,EAAAA,IAAAA,OAAAA,CAAMC,KAAK,kBAAkBC,SAAS,UAAAR,EAAKG,oBAAL,eAAmBO,SAAnB,MACtCJ,EAAAA,EAAAA,IAAAA,OAAAA,CAAMC,KAAK,gBAAgBC,QAASV,KACpCQ,EAAAA,EAAAA,IAAAA,OAAAA,CAAMC,KAAK,sBAAsBC,QAASN,IACzCH,EAKP,C,mGCnBaY,EAAO,kBAAM,QAAC,IAAD,CAAKb,MAAM,aAAjB,EAEpB,UA9BiB,SAAC,GAAmB,IAAjBc,EAAiB,EAAjBA,WAClB,OACE,oBACE,mCACe,2CAEf,oIAE+C,KAC7C,6DAHF,MAKA,eACEC,MAAO,CAAEC,MAAO,QAASC,aAAc,wBACvCC,IAAI,eACJC,IAAKL,EAAWM,WAElB,mDACkC,KAChC,aAAGC,KAAK,oFAAR,6CAFF,MAOA,QAAC,KAAD,CAAMC,GAAG,KAAT,2BAGL,C","sources":["webpack://gatsby-starter-default/./src/components/seo.tsx","webpack://gatsby-starter-default/./src/pages/using-ssr.js"],"sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\ninterface Seo {\r\n  description?: string\r\n  title: string\r\n  children?: PropTypes.ReactNodeArray\r\n}\r\n\r\nfunction Seo({ description, title, children }: Seo) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst UsingSSR = ({ serverData }) => {\r\n  return (\r\n    <div>\r\n      <h1>\r\n        This page is <b>rendered server-side</b>\r\n      </h1>\r\n      <p>\r\n        This page is rendered server side every time the page is requested.\r\n        Reload it to see a(nother) random photo from{\" \"}\r\n        <code>dog.ceo/api/breed/shiba/images/random</code>:\r\n      </p>\r\n      <img\r\n        style={{ width: \"320px\", borderRadius: \"var(--border-radius)\" }}\r\n        alt=\"A random dog\"\r\n        src={serverData.message}\r\n      />\r\n      <p>\r\n        To learn more, head over to our{\" \"}\r\n        <a href=\"https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/\">\r\n          documentation about Server Side Rendering\r\n        </a>\r\n        .\r\n      </p>\r\n      <Link to=\"/\">Go back to the homepage</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Head = () => <Seo title=\"Using SSR\" />\r\n\r\nexport default UsingSSR\r\n\r\nexport async function getServerData() {\r\n  try {\r\n    const res = await fetch(`https://dog.ceo/api/breed/shiba/images/random`)\r\n    if (!res.ok) {\r\n      throw new Error(`Response failed`)\r\n    }\r\n    return {\r\n      props: await res.json(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      status: 500,\r\n      headers: {},\r\n      props: {},\r\n    }\r\n  }\r\n}\r\n"],"names":["description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_site$siteMetadata","___EmotionJSX","name","content","property","author","Head","serverData","style","width","borderRadius","alt","src","message","href","to"],"sourceRoot":""}